# Задача 101 Вычислить число π c заданной точностью d

# Пример: 
# при d = 0.001, π = 3.141    0.1 ≤ d ≤ 0.00000000001



# import math
# import random
def MMk():
    """
    Данная функция вычисляет число pi методом Монте Карло.
    Для этого необходимо найти площадь круга S заданного радиусом r,
    то, пользуясь известной формулой расчета площади круга  S=pi*(r*r), найдем значение числа pi=S/(r*r)
    Для вычисления площади круга следует постороить чертеж круга и бозового прямоугольника.
        возьмем круг радиусом  r=1.
        тогда минимальный базовый прямоугольник в корорый можно вписать нашу окружность можно построить в форме квадрата со стороной равной=2.
        S квадрата (площадь квадрата) = 4 (квадрат стороны квадрата)
    С использование генераторы случайных чисел будем имиторовать попадание случайных точек в квадрат и из них в круг.
        n- общее количество точек k -  число точек попавших в круг
    Для вычисления площади круга будем использовать основную формулу метода Монте-Кармо: S=4*(k/n)
    Для вычисления значение числа pi воспользуемся выведенной ранее формулой pi=S/(r*r), которая для единичного круга получит вид pi=S.
    """

        # Для подсчета  числа точек, попавших в единичный круг в цикле следует использовать оператор if с условием попадания точки в круг
        # (x-1)*(x-1)+ (y-1)*(y-1)<=1 и при выполнении этого условия организовать накопление значений переменной k=k+1 как счетчика.



extent=float(input('Введите с какой точностью необходимо вычислить число pi (0.1 ≤ d ≤ 0.00000000001) - '))
k=0 # Задаем начальное значение счетчика точек попавших в круг.
n=10000 # Начальное значение количества точек для генерации.
pi_1=0 # Начальное значение расчетного числа pi.
while math.pi-pi_1!=extent: # Проверка выполнения вычислений с заданой точностью.
    for i in range(n): 
        x=round(random.uniform(0,2),3) # Генерация случайных координат x с плавающей точкой в диапазоне от 0 до 2, с округлением до 3 знака после запятой
        y=round(random.uniform(0,2),3) # Генерация случайных координат x с плавающей точкой в диапазоне от 0 до 2, с округлением до 3 знака после запятой
        #print(x,y, end=' ', sep=',')
        if ((x-1)*(x-1))+((y-1)*(y-1))<=1:  # Для подсчета числа точек, попавших в единичный круг
            k+=1 # При попадании точки в круг, увеличиваем значение счетчика.
    pi_1=4*(k/n)
    n*=10
    print("заданое n - ", n)
    print("заданое пи - ", round(math.pi,5))
    print('Вычисленное пи - ', pi_1)
    print('разница math.pi-pi',math.pi-pi_1)
    print('условия math.pi-pi',math.pi-pi_1<=extent)
    print()
print('разница math.pi-pi',math.pi-pi_1)
print('условия math.pi-pi',math.pi-pi_1>=extent)

  
print()
print('разница math.pi-pi',math.pi-pi)
print('разница math.pi-pi',math.pi-pi>=extent)
print('Вычисленное пи - ', pi)
print('Количество итераций - ', k)
print("заданое пи - ", math.pi)
print('pi стандарт', round(math.pi,4))
print('pi расчет', round(pi,4))


# from math import factorial
# from decimal import *
# def chudnovsky(n):
#     pi = Decimal(0)
#     k = 0
#     while k < n:
#         pi += (Decimal(-1)**k) * (Decimal(factorial(6 * k)) / ((factorial(k)**3) * (factorial(3*k))) * (13591409 + 545140134 * k) / (640320**(3 * k)))
#         k += 1
#         print("Шаг: {} из {}".format(k, n))
#     pi = pi * Decimal(10005).sqrt() / 4270934400
#     pi = pi**(-1)
#     return pi
# # Требуемая точность (число знаков)
# N = 1000
# getcontext().prec = N
# val = chudnovsky(N / 14)
# print(val)

# from decimal import Decimal
# print ("Квадратный корень:")
# number = Decimal(12)
# result = Decimal(3)
# for p in range(1, 9):
#     result = (result + number / result)/Decimal(2)
#     difference = result**2 - number
#     print (p, result, difference)
# sqrt12 = result
# sum = Decimal(1)
# sign = -1
# for p in range(1,32):
#     sum += Decimal(sign) / Decimal((2 * p + 1)*(3**p))
#     sign = -sign
#     print(p, sqrt12 * sum)
# print("Result:", sqrt12 * sum)

# def calc_pi(eps=1.0e-5):
#     s=0
#     d=1
#     sgn=1
#     while True:
#         a=4/d
#         s=s+sgn*a
#         if a<eps:
#             return s
#         sgn=-sgn
#         d=d+2
 
# s=calc_pi(0.001)
# print(s)








