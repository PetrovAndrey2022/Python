# Множества - содержит в себе уникальные элементы, про упорядоченность никто не говорит.


# color = {'red','green','blue'}
# print(color) # {'blue', 'green', 'red'}
# print(type(color)) # <class 'set'>


# # Добавление элементов в множества.
# color = {'red','green','blue'}
# color.add('red') # Ничего не изменится, так как такой элемент уже есть во множестве.
# print(color) # {'blue', 'green', 'red'} 

# # Добавление элементов в множества.
# color = {'red','green','blue'}
# color.add('grey') # Добавили грей - серый
# print(color) # {'blue', 'red', 'grey', 'green'}


# Удаление элементов из множества.
# color = {'red','green','blue','grey'}
# # print(color) # {'grey', 'blue', 'red', 'green'}
# # color.remove('red') # ремуф -  удаление элемента которого нет
# # print(color) # {'grey', 'blue', 'green'}

# # color.remove('ttt') # ремуф - удаление
# # print(color) # KeyError: 'ttt' - ошибка, так как такого элемента нет во множестве

# # color.discard('ttt') # ремуф - удаление элемента которого нет
# # print(color) # {'green', 'grey', 'blue', 'red'} , элемента нет, но программа не выдала ошибку.

# # Очищает множество.
# color.clear() # очищает множество
# print(color) # set() - пустое множество в итоге.


# Операщии со множествами:
# a={1,2,3,4,5}
# b={2,5,8,134,21}
# # c=a.copy() # {1, 2, 3, 4, 5}
# # u=a.union(b) # {1, 2, 3, 4, 5, 134, 8, 21} юнион - объединение множеств
# # i=a.intersection(b) # Интерсекшен - пересечение  {2, 5}
# dl=a.difference(b) # дифференс - разница {1, 3, 4}
# dr=b.difference(a) # дифференс - разница {8, 21, 134}
# print(dl)

# Не изменяемые множества
# можно сделать заморозку множества, если необходимо работать с неизменяемым множеством.
# s=frozenset(a) фрозенсет - замороженый набор, операции по изменению работать не будут
